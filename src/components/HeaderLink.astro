---
export interface Props {
	href: string;
	class?: string;
}

const { href, class: className, ...props } = Astro.props;
const { pathname } = Astro.url;
const isActive = href === pathname || href === pathname.replace(/\/$/, '') || 
	(href !== '/' && pathname.startsWith(href));
---

<a href={href} class:list={[className, { active: isActive }]} {...props}>
	<slot />
</a>

<style>
	a {
		display: inline-flex;
		align-items: center;
		padding: var(--space-2-5) var(--space-4);
		border-radius: var(--border-radius-lg);
		font-family: var(--font-family-body);
		font-size: var(--font-size-sm);
		font-weight: var(--font-weight-medium);
		text-decoration: none;
		color: var(--color-text-secondary);
		transition: var(--transition-all);
		position: relative;
		overflow: hidden;
		white-space: nowrap;
	}
	
	a::before {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: var(--gradient-primary);
		opacity: 0;
		transition: var(--transition-all);
		border-radius: var(--border-radius-lg);
		transform: scale(0.8);
	}
	
	a::after {
		content: '';
		position: absolute;
		bottom: 2px;
		left: 50%;
		width: 0;
		height: 2px;
		background: var(--gradient-primary);
		transition: var(--transition-all);
		transform: translateX(-50%);
		border-radius: var(--border-radius-full);
	}
	
	a:hover {
		color: var(--color-text);
		transform: translateY(-1px);
	}
	
	a:hover::before {
		opacity: 0.1;
		transform: scale(1);
	}
	
	a:hover::after {
		width: 80%;
	}
	
	a.active {
		color: var(--color-primary);
		font-weight: var(--font-weight-semibold);
	}
	
	a.active::before {
		opacity: 0.15;
		transform: scale(1);
	}
	
	a.active::after {
		width: 100%;
		opacity: 1;
	}
	
	a:focus-visible {
		outline: 2px solid var(--color-primary);
		outline-offset: 2px;
	}
	
	/* Mobile adjustments */
	@media (max-width: 640px) {
		a {
			padding: var(--space-2) var(--space-3);
			font-size: var(--font-size-xs);
		}
	}
</style>
