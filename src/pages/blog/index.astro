---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import CategoryFilter from '../../components/blog/CategoryFilter.astro';
import RecipeCard from '../../components/cooking/RecipeCard.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';

// Get all posts from all collections
const [originalBlogPosts, personalPosts, cookingPosts] = await Promise.all([
	getCollection('blog'),
	getCollection('personal'),
	getCollection('cooking')
]);

// Combine all posts and sort by date
const allPosts = [
	...originalBlogPosts.map(post => ({ ...post, collection: 'blog' as const })),
	...personalPosts.map(post => ({ ...post, collection: 'personal' as const })),
	...cookingPosts.map(post => ({ ...post, collection: 'cooking' as const }))
].sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Separate featured posts
const featuredPosts = allPosts.filter(post => post.data.featured);
const regularPosts = allPosts.filter(post => !post.data.featured);
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={`Blog - ${SITE_TITLE}`} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header />
		<main class="container">
			<div class="page-header">
				<h1 class="page-title">All Posts</h1>
				<p class="page-description">Personal thoughts, coding insights, and delicious recipes</p>
			</div>
			
			<CategoryFilter currentCategory="all" />
			
			{featuredPosts.length > 0 && (
				<section class="featured-section">
					<h2 class="section-title">Featured</h2>
					<div class="posts-grid">
						{featuredPosts.map((post) => {
							if (post.collection === 'cooking' && post.data.category === 'cooking') {
								return (
									<RecipeCard
										title={post.data.title}
										description={post.data.description}
										href={`/blog/${post.id}/`}
										heroImage={post.data.heroImage}
										difficulty={post.data.difficulty}
										prepTime={post.data.prepTime}
										cookTime={post.data.cookTime}
										servings={post.data.servings}
										cuisine={post.data.cuisine}
										tags={post.data.tags}
									/>
								);
							} else {
								return (
									<article class="post-card">
										<a href={`/blog/${post.id}/`} class="post-link">
											{post.data.heroImage && (
												<div class="post-image">
													<img src={post.data.heroImage} alt={post.data.title} loading="lazy" />
													<span class={`post-category ${post.collection}`}>
														{post.collection === 'personal' ? 'Personal' : 
														 post.collection === 'cooking' ? 'Recipe' : 'Blog'}
													</span>
												</div>
											)}
											<div class="post-content">
												<h3 class="post-title">{post.data.title}</h3>
												<p class="post-description">{post.data.description}</p>
												<time class="post-date">
													<FormattedDate date={post.data.pubDate} />
												</time>
											</div>
										</a>
									</article>
								);
							}
						})}
					</div>
				</section>
			)}
			
			<section class="all-posts-section">
				<h2 class="section-title">Recent Posts</h2>
				<div class="posts-grid">
					{regularPosts.map((post) => {
						if (post.collection === 'cooking' && post.data.category === 'cooking') {
							return (
								<RecipeCard
									title={post.data.title}
									description={post.data.description}
									href={`/blog/${post.id}/`}
									heroImage={post.data.heroImage}
									difficulty={post.data.difficulty}
									prepTime={post.data.prepTime}
									cookTime={post.data.cookTime}
									servings={post.data.servings}
									cuisine={post.data.cuisine}
									tags={post.data.tags}
								/>
							);
						} else {
							return (
								<article class="post-card">
									<a href={`/blog/${post.id}/`} class="post-link">
										{post.data.heroImage && (
											<div class="post-image">
												<img src={post.data.heroImage} alt={post.data.title} loading="lazy" />
												<span class={`post-category ${post.collection}`}>
													{post.collection === 'personal' ? 'Personal' : 
													 post.collection === 'cooking' ? 'Recipe' : 'Blog'}
												</span>
											</div>
										)}
										<div class="post-content">
											<h3 class="post-title">{post.data.title}</h3>
											<p class="post-description">{post.data.description}</p>
											<time class="post-date">
												<FormattedDate date={post.data.pubDate} />
											</time>
										</div>
									</a>
								</article>
							);
						}
					})}
				</div>
			</section>
		</main>
		<Footer />
	</body>
</html>

<style>
	main {
		padding: var(--space-2xl) 0 var(--space-3xl) 0;
		min-height: calc(100vh - 64px);
	}
	
	.page-header {
		text-align: center;
		margin-bottom: var(--space-2xl);
	}
	
	.page-title {
		font-size: var(--font-size-3xl);
		font-weight: var(--font-weight-bold);
		margin-bottom: var(--space-md);
		color: var(--color-text);
	}
	
	.page-description {
		font-size: var(--font-size-lg);
		color: var(--color-text-light);
		max-width: 600px;
		margin: 0 auto;
		line-height: var(--line-height-relaxed);
	}
	
	.featured-section,
	.all-posts-section {
		margin-bottom: var(--space-3xl);
	}
	
	.section-title {
		font-size: var(--font-size-2xl);
		font-weight: var(--font-weight-semibold);
		margin-bottom: var(--space-xl);
		color: var(--color-text);
	}
	
	.posts-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
		gap: var(--space-xl);
	}
	
	.post-card {
		background-color: var(--color-background);
		border: var(--border-width) solid var(--color-border-light);
		border-radius: var(--border-radius-lg);
		overflow: hidden;
		transition: all var(--transition-normal);
		height: 100%;
	}
	
	.post-card:hover {
		border-color: var(--color-border);
		box-shadow: var(--shadow-md);
		transform: translateY(-2px);
	}
	
	.post-link {
		text-decoration: none;
		color: inherit;
		display: flex;
		flex-direction: column;
		height: 100%;
	}
	
	.post-image {
		aspect-ratio: 16/9;
		overflow: hidden;
		position: relative;
		background-color: var(--color-background-softer);
	}
	
	.post-image img {
		width: 100%;
		height: 100%;
		object-fit: cover;
		transition: transform var(--transition-slow);
	}
	
	.post-card:hover .post-image img {
		transform: scale(1.02);
	}
	
	.post-category {
		position: absolute;
		top: var(--space-md);
		left: var(--space-md);
		padding: var(--space-xs) var(--space-sm);
		border-radius: var(--border-radius-sm);
		font-size: var(--font-size-xs);
		font-weight: var(--font-weight-medium);
		color: white;
		backdrop-filter: blur(4px);
	}
	
	.post-category.personal {
		background-color: rgba(37, 99, 235, 0.9);
	}
	
	.post-category.cooking {
		background-color: rgba(5, 150, 105, 0.9);
	}
	
	.post-category.blog {
		background-color: rgba(107, 114, 128, 0.9);
	}
	
	.post-content {
		padding: var(--space-lg);
		flex-grow: 1;
		display: flex;
		flex-direction: column;
	}
	
	.post-title {
		font-size: var(--font-size-lg);
		font-weight: var(--font-weight-semibold);
		margin-bottom: var(--space-sm);
		color: var(--color-text);
		line-height: var(--line-height-tight);
	}
	
	.post-description {
		color: var(--color-text-light);
		font-size: var(--font-size-sm);
		line-height: var(--line-height-normal);
		margin-bottom: var(--space-md);
		flex-grow: 1;
	}
	
	.post-date {
		color: var(--color-text-lighter);
		font-size: var(--font-size-xs);
		font-weight: var(--font-weight-medium);
		margin-top: auto;
	}
	
	@media (max-width: 640px) {
		main {
			padding: var(--space-xl) 0 var(--space-2xl) 0;
		}
		
		.page-title {
			font-size: var(--font-size-2xl);
		}
		
		.posts-grid {
			grid-template-columns: 1fr;
			gap: var(--space-lg);
		}
		
		.post-content {
			padding: var(--space-md);
		}
	}
</style>
