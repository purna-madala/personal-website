---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';

type Props = (
	| CollectionEntry<'blog'>['data'] 
	| CollectionEntry<'personal'>['data'] 
	| CollectionEntry<'cooking'>['data']
) & {
	collection?: 'blog' | 'personal' | 'cooking';
};

const { 
	title, 
	description, 
	pubDate, 
	updatedDate, 
	heroImage, 
	collection = 'blog',
	...rest 
} = Astro.props;

// Type guard and extract cooking-specific props
const isCookingPost = collection === 'cooking';
const cookingData = isCookingPost ? rest as CollectionEntry<'cooking'>['data'] : null;

// Type guard for personal posts
const isPersonalPost = collection === 'personal';
const personalData = isPersonalPost ? rest as CollectionEntry<'personal'>['data'] : null;

const totalTime = cookingData ? (cookingData.prepTime || 0) + (cookingData.cookTime || 0) : 0;
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
	</head>

	<body>
		<Header />
		<main class="container">
			<article class="article">
				{heroImage && (
					<div class="hero-image">
						<img src={heroImage} alt={title} />
						<div class="image-overlay">
							<span class={`category-badge ${collection}`}>
								{collection === 'personal' ? 'Personal' : 
								 collection === 'cooking' ? 'Recipe' : 'Blog'}
							</span>
							{cookingData?.difficulty && (
								<span class={`difficulty-badge difficulty-${cookingData.difficulty}`}>
									{cookingData.difficulty}
								</span>
							)}
						</div>
					</div>
				)}
				
				<div class="article-header">
					<div class="article-meta">
						<time class="publish-date">
							<FormattedDate date={pubDate} />
						</time>
						{updatedDate && (
							<time class="updated-date">
								Updated <FormattedDate date={updatedDate} />
							</time>
						)}
					</div>
					<h1 class="article-title">{title}</h1>
					<p class="article-description">{description}</p>
				</div>
				
				{isCookingPost && cookingData && (
					<div class="recipe-info">
						<h3 class="recipe-info-title">Recipe Details</h3>
						<div class="recipe-stats">
							{totalTime > 0 && (
								<div class="stat-item">
									<div class="stat-label">Total Time</div>
									<div class="stat-value">{totalTime} min</div>
								</div>
							)}
							{cookingData.prepTime && (
								<div class="stat-item">
									<div class="stat-label">Prep Time</div>
									<div class="stat-value">{cookingData.prepTime} min</div>
								</div>
							)}
							{cookingData.cookTime && (
								<div class="stat-item">
									<div class="stat-label">Cook Time</div>
									<div class="stat-value">{cookingData.cookTime} min</div>
								</div>
							)}
							{cookingData.servings && (
								<div class="stat-item">
									<div class="stat-label">Servings</div>
									<div class="stat-value">{cookingData.servings}</div>
								</div>
							)}
						</div>
						
						{cookingData.ingredients && cookingData.ingredients.length > 0 && (
							<div class="ingredients">
								<h4 class="ingredients-title">Ingredients</h4>
								<ul class="ingredients-list">
									{cookingData.ingredients.map(ingredient => (
										<li class="ingredient-item">{ingredient}</li>
									))}
								</ul>
							</div>
						)}
					</div>
				)}
				
				<div class="article-content">
					<slot />
				</div>
				
				{((personalData?.tags && personalData.tags.length > 0) || 
				  (cookingData?.tags && cookingData.tags.length > 0)) && (
					<div class="article-tags">
						<h4 class="tags-title">Tags</h4>
						<div class="tags-list">
							{(personalData?.tags || cookingData?.tags || []).map(tag => (
								<span class={`tag tag-${collection}`}>{tag}</span>
							))}
						</div>
					</div>
				)}
			</article>
		</main>
		<Footer />
	</body>
</html>

<style>
	main {
		padding: var(--space-3xl) 0;
		min-height: calc(100vh - 64px);
	}
	
	.article {
		max-width: 768px;
		margin: 0 auto;
	}
	
	.hero-image {
		position: relative;
		aspect-ratio: 16/9;
		overflow: hidden;
		border-radius: var(--border-radius-lg);
		margin-bottom: var(--space-2xl);
		background-color: var(--color-background-softer);
	}
	
	.hero-image img {
		width: 100%;
		height: 100%;
		object-fit: cover;
	}
	
	.image-overlay {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: linear-gradient(to bottom, rgba(0,0,0,0.1) 0%, transparent 30%, transparent 70%, rgba(0,0,0,0.1) 100%);
	}
	
	.category-badge {
		position: absolute;
		top: var(--space-lg);
		left: var(--space-lg);
		padding: var(--space-sm) var(--space-md);
		border-radius: var(--border-radius-md);
		font-size: var(--font-size-sm);
		font-weight: var(--font-weight-medium);
		color: white;
		backdrop-filter: blur(8px);
	}
	
	.category-badge.personal {
		background-color: rgba(37, 99, 235, 0.9);
	}
	
	.category-badge.cooking {
		background-color: rgba(5, 150, 105, 0.9);
	}
	
	.category-badge.blog {
		background-color: rgba(107, 114, 128, 0.9);
	}
	
	.difficulty-badge {
		position: absolute;
		top: var(--space-lg);
		right: var(--space-lg);
		padding: var(--space-sm) var(--space-md);
		border-radius: var(--border-radius-md);
		font-size: var(--font-size-sm);
		font-weight: var(--font-weight-medium);
		color: white;
		text-transform: capitalize;
		backdrop-filter: blur(8px);
	}
	
	.difficulty-easy {
		background-color: rgba(16, 185, 129, 0.9);
	}
	
	.difficulty-medium {
		background-color: rgba(245, 158, 11, 0.9);
	}
	
	.difficulty-hard {
		background-color: rgba(239, 68, 68, 0.9);
	}
	
	.article-header {
		margin-bottom: var(--space-2xl);
		text-align: center;
	}
	
	.article-meta {
		margin-bottom: var(--space-md);
	}
	
	.publish-date {
		color: var(--color-text-light);
		font-size: var(--font-size-sm);
		font-weight: var(--font-weight-medium);
	}
	
	.updated-date {
		color: var(--color-text-lighter);
		font-size: var(--font-size-xs);
		font-style: italic;
		display: block;
		margin-top: var(--space-xs);
	}
	
	.article-title {
		font-size: clamp(var(--font-size-2xl), 4vw, var(--font-size-4xl));
		font-weight: var(--font-weight-bold);
		line-height: var(--line-height-tight);
		margin-bottom: var(--space-md);
		color: var(--color-text);
	}
	
	.article-description {
		font-size: var(--font-size-lg);
		color: var(--color-text-light);
		line-height: var(--line-height-relaxed);
		max-width: 600px;
		margin: 0 auto;
	}
	
	.recipe-info {
		background-color: var(--color-background-soft);
		border: var(--border-width) solid var(--color-border-light);
		border-radius: var(--border-radius-lg);
		padding: var(--space-xl);
		margin-bottom: var(--space-2xl);
	}
	
	.recipe-info-title {
		font-size: var(--font-size-lg);
		font-weight: var(--font-weight-semibold);
		color: var(--color-text);
		margin-bottom: var(--space-lg);
	}
	
	.recipe-stats {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
		gap: var(--space-md);
		margin-bottom: var(--space-xl);
	}
	
	.stat-item {
		text-align: center;
		padding: var(--space-md);
		background-color: var(--color-background);
		border-radius: var(--border-radius-md);
		border: var(--border-width) solid var(--color-border-light);
	}
	
	.stat-label {
		font-size: var(--font-size-xs);
		color: var(--color-text-light);
		font-weight: var(--font-weight-medium);
		text-transform: uppercase;
		letter-spacing: 0.5px;
		margin-bottom: var(--space-xs);
	}
	
	.stat-value {
		font-size: var(--font-size-lg);
		font-weight: var(--font-weight-semibold);
		color: var(--color-secondary);
	}
	
	.ingredients {
		background-color: var(--color-background);
		border: var(--border-width) solid var(--color-border-light);
		border-radius: var(--border-radius-md);
		padding: var(--space-lg);
	}
	
	.ingredients-title {
		font-size: var(--font-size-base);
		font-weight: var(--font-weight-semibold);
		color: var(--color-text);
		margin-bottom: var(--space-md);
	}
	
	.ingredients-list {
		list-style: none;
		padding: 0;
		margin: 0;
	}
	
	.ingredient-item {
		padding: var(--space-sm) 0;
		border-bottom: var(--border-width) solid var(--color-border-light);
		color: var(--color-text);
		line-height: var(--line-height-normal);
	}
	
	.ingredient-item:last-child {
		border-bottom: none;
	}
	
	.ingredient-item::before {
		content: 'â€¢';
		color: var(--color-secondary);
		margin-right: var(--space-sm);
		font-weight: bold;
	}
	
	.article-content {
		line-height: var(--line-height-relaxed);
		color: var(--color-text);
	}
	
	/* Typography styles for article content */
	.article-content :global(h1),
	.article-content :global(h2),
	.article-content :global(h3),
	.article-content :global(h4),
	.article-content :global(h5),
	.article-content :global(h6) {
		font-weight: var(--font-weight-semibold);
		color: var(--color-text);
		margin: var(--space-xl) 0 var(--space-md) 0;
		line-height: var(--line-height-tight);
	}
	
	.article-content :global(h2) {
		font-size: var(--font-size-2xl);
		border-bottom: var(--border-width) solid var(--color-border-light);
		padding-bottom: var(--space-sm);
	}
	
	.article-content :global(h3) {
		font-size: var(--font-size-xl);
	}
	
	.article-content :global(p) {
		margin: var(--space-lg) 0;
		line-height: var(--line-height-relaxed);
	}
	
	.article-content :global(ul),
	.article-content :global(ol) {
		margin: var(--space-lg) 0;
		padding-left: var(--space-xl);
	}
	
	.article-content :global(li) {
		margin: var(--space-sm) 0;
		line-height: var(--line-height-normal);
	}
	
	.article-content :global(strong) {
		font-weight: var(--font-weight-semibold);
		color: var(--color-text);
	}
	
	.article-content :global(blockquote) {
		border-left: 4px solid var(--color-primary);
		padding-left: var(--space-lg);
		margin: var(--space-xl) 0;
		font-style: italic;
		color: var(--color-text-light);
	}
	
	.article-content :global(code) {
		background-color: var(--color-background-softer);
		padding: var(--space-xs) var(--space-sm);
		border-radius: var(--border-radius-sm);
		font-family: var(--font-family-mono);
		font-size: 0.9em;
		border: var(--border-width) solid var(--color-border-light);
	}
	
	.article-content :global(pre) {
		background-color: var(--color-background-softer);
		padding: var(--space-lg);
		border-radius: var(--border-radius-md);
		overflow-x: auto;
		margin: var(--space-xl) 0;
		border: var(--border-width) solid var(--color-border-light);
	}
	
	.article-content :global(pre code) {
		background: none;
		padding: 0;
		border: none;
	}
	
	.article-content :global(hr) {
		border: none;
		border-top: var(--border-width) solid var(--color-border-light);
		margin: var(--space-2xl) 0;
	}
	
	.article-tags {
		margin-top: var(--space-2xl);
		padding-top: var(--space-xl);
		border-top: var(--border-width) solid var(--color-border-light);
	}
	
	.tags-title {
		font-size: var(--font-size-sm);
		font-weight: var(--font-weight-semibold);
		color: var(--color-text-light);
		margin-bottom: var(--space-md);
		text-transform: uppercase;
		letter-spacing: 0.5px;
	}
	
	.tags-list {
		display: flex;
		gap: var(--space-sm);
		flex-wrap: wrap;
	}
	
	.tag {
		padding: var(--space-xs) var(--space-md);
		border-radius: var(--border-radius-xl);
		font-size: var(--font-size-xs);
		font-weight: var(--font-weight-medium);
		border: var(--border-width) solid var(--color-border-light);
		background-color: var(--color-background-soft);
		color: var(--color-text);
		transition: all var(--transition-fast);
	}
	
	.tag-personal {
		border-color: rgba(37, 99, 235, 0.2);
		background-color: rgba(37, 99, 235, 0.1);
		color: var(--color-primary-dark);
	}
	
	.tag-cooking {
		border-color: rgba(5, 150, 105, 0.2);
		background-color: rgba(5, 150, 105, 0.1);
		color: var(--color-secondary-dark);
	}
	
	@media (max-width: 640px) {
		main {
			padding: var(--space-2xl) 0;
		}
		
		.hero-image {
			margin-bottom: var(--space-xl);
			border-radius: var(--border-radius-md);
		}
		
		.category-badge,
		.difficulty-badge {
			position: static;
			display: inline-block;
			margin: var(--space-md) var(--space-md) 0 0;
		}
		
		.recipe-info {
			padding: var(--space-lg);
		}
		
		.recipe-stats {
			grid-template-columns: repeat(2, 1fr);
		}
		
		.article-content :global(pre) {
			font-size: var(--font-size-sm);
		}
	}
</style>
